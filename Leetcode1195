package mapper;

import java.util.concurrent.locks.ReentrantLock;
import java.util.function.IntConsumer;

public class Leetcode1195 {

    public static void main(String[] args) {
        FizzBuzz fizzBuzz = new FizzBuzz(15);
        IntConsumer pNumber = x -> System.out.println(x);

        Runnable test3 = () -> {
            try {
                fizzBuzz.fizz(() -> System.out.println("fizz"));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };

        Runnable test5 = () -> {
            try {
                fizzBuzz.buzz(() -> System.out.println("buzz"));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };

        Runnable test3and5 = () -> {
            try {
                fizzBuzz.fizzbuzz(() -> System.out.println("fizzbuzz"));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };

        Runnable testNumber = ()->{
            try {
                fizzBuzz.number(pNumber);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };

        Thread t1 = new Thread(test3);
        Thread t2 = new Thread(test5);
        Thread t3 = new Thread(test3and5);
        Thread t4 = new Thread(testNumber);

        t1.start();
        t2.start();
        t3.start();
        t4.start();
    }


    static class FizzBuzz {

        ReentrantLock lock = new ReentrantLock();
        private int index = 1;
        private int n;

        public FizzBuzz(int n) {
            this.n = n;
        }

        public void fizz(Runnable printFizz) throws InterruptedException {
            while (index <= n) {
                lock.lock();
                try {
                    if (index <= n && index % 5 != 0 && index % 3 == 0) {
                        printFizz.run();
                        index++;
                    }
                } finally {
                    lock.unlock();
                }
            }
        }

        public void buzz(Runnable printBuzz) throws InterruptedException {
            while (index <= n) {
                lock.lock();
                try {
                    if (index <= n && index % 5 == 0 && index % 3 != 0) {
                        printBuzz.run();
                        index++;
                    }
                } finally {
                    lock.unlock();
                }
            }
        }

        public void fizzbuzz(Runnable printFizzBuzz) throws InterruptedException {
            while (index <= n) {
                lock.lock();
                try {
                    if (index <= n && index % 5 == 0 && index % 3 == 0) {
                        printFizzBuzz.run();
                        index++;
                    }
                } finally {
                    lock.unlock();
                }
            }
        }

        public void number(IntConsumer printNumber) throws InterruptedException {
            while (index <= n) {
                lock.lock();
                try {
                    if (index <= n && index % 3 != 0 && index % 5 != 0) {
                        printNumber.accept(index);
                        index++;
                    }
                } finally {
                    lock.unlock();
                }
            }
        }
    }
}
